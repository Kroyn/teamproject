const express = require("express");
const router = express.Router();
const { User } = require("../models"); // –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
const bcrypt = require("bcrypt");

// GET –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
router.get("/", (req, res) => {
    res.json({ message: "User API –ø—Ä–∞—Ü—é—î üü¢" });
});

// POST /register ‚Äî —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
router.post("/register", async (req, res) => {
    const { fullName, email, password } = req.body;

    if (!fullName || !email || !password) {
        return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    try {
        const existing = await User.findOne({ where: { email } });
        if (existing) {
            return res.status(409).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î" });
        }

        const passwordHash = await bcrypt.hash(password, 10);
        const user = await User.create({ fullName, email, passwordHash });
        res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ", userId: user.id });

    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
